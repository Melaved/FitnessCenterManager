package handlers

import (
	"fitness-center-manager/internal/database"
	"fitness-center-manager/internal/models"
	"log"
	"strconv"
	"time"

	"github.com/gofiber/fiber/v2"
)

func GetClients(c *fiber.Ctx) error {
    db := database.GetDB()
    
    rows, err := db.Query(`
        SELECT 
            "id_–∫–ª–∏–µ–Ω—Ç–∞", 
            "–§–ò–û", 
            "–ù–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞", 
            "–î–∞—Ç–∞_—Ä–æ–∂–¥–µ–Ω–∏—è", 
            "–î–∞—Ç–∞_—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", 
            "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ_–¥–∞–Ω–Ω—ã–µ"
        FROM "–ö–ª–∏–µ–Ω—Ç" 
        ORDER BY "id_–∫–ª–∏–µ–Ω—Ç–∞"
    `)
    if err != nil {
        return c.Status(500).SendString("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤: " + err.Error())
    }
    defer rows.Close()
    
    var clients []models.Client
    for rows.Next() {
        var client models.Client
        err := rows.Scan(
            &client.ID,
            &client.FIO, 
            &client.Phone,
            &client.BirthDate,
            &client.RegisterDate,
            &client.MedicalData,
        )
        if err != nil {
            return c.Status(500).SendString("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: " + err.Error())
        }
        clients = append(clients, client)
    }
    
    return c.Render("clients", fiber.Map{
        "Title":   "–ö–ª–∏–µ–Ω—Ç—ã",
        "Clients": clients,
    })
}

// CreateClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
func CreateClient(c *fiber.Ctx) error {
    log.Println("üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...")
    
    type ClientForm struct {
        FIO         string `form:"fio"`
        Phone       string `form:"phone"`
        BirthDate   string `form:"birth_date"`
        MedicalData string `form:"medical_data"`
    }
    
    var form ClientForm
    if err := c.BodyParser(&form); err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—ã: %v", err)
        return c.Status(400).JSON(fiber.Map{
            "success": false,
            "error":   "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã",
        })
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if form.FIO == "" || form.Phone == "" || form.BirthDate == "" {
        return c.Status(400).JSON(fiber.Map{
            "success": false,
            "error":   "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã",
        })
    }
    
    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    birthDate, err := time.Parse("2006-01-02", form.BirthDate)
    if err != nil {
        return c.Status(400).JSON(fiber.Map{
            "success": false,
            "error":   "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã",
        })
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    age := time.Since(birthDate).Hours() / 24 / 365
    if age < 16 {
        return c.Status(400).JSON(fiber.Map{
            "success": false,
            "error":   "–ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞—Ä—à–µ 16 –ª–µ—Ç",
        })
    }
    
    db := database.GetDB()
    
    // –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
    log.Printf("üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: FIO=%s, Phone=%s, MedicalData='%s'", 
        form.FIO, form.Phone, form.MedicalData)
    
    var clientID int
    // –ï—Å–ª–∏ MedicalData –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ NULL
    err = db.QueryRow(`
        INSERT INTO "–ö–ª–∏–µ–Ω—Ç" ("–§–ò–û", "–ù–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–î–∞—Ç–∞_—Ä–æ–∂–¥–µ–Ω–∏—è", "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ_–¥–∞–Ω–Ω—ã–µ")
        VALUES ($1, $2, $3, $4)
        RETURNING "id_–∫–ª–∏–µ–Ω—Ç–∞"
    `, form.FIO, form.Phone, birthDate, form.MedicalData).Scan(&clientID)
    
    if err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: %v", err)
        return c.Status(500).JSON(fiber.Map{
            "success": false,
            "error":   "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: " + err.Error(),
        })
    }
    
    log.Printf("‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω! ID: %d, –ú–µ–¥.–¥–∞–Ω–Ω—ã–µ: '%s'", clientID, form.MedicalData)
    
    return c.JSON(fiber.Map{
        "success": true,
        "message": "–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
        "client_id": clientID,
    })
}

// GetClientByID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
func GetClientByID(c *fiber.Ctx) error {
    id := c.Params("id")
    
    db := database.GetDB()
    
    var client models.Client
    err := db.QueryRow(`
        SELECT 
            "id_–∫–ª–∏–µ–Ω—Ç–∞", 
            "–§–ò–û", 
            "–ù–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞", 
            "–î–∞—Ç–∞_—Ä–æ–∂–¥–µ–Ω–∏—è", 
            "–î–∞—Ç–∞_—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", 
            "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ_–¥–∞–Ω–Ω—ã–µ"
        FROM "–ö–ª–∏–µ–Ω—Ç" 
        WHERE "id_–∫–ª–∏–µ–Ω—Ç–∞" = $1
    `, id).Scan(
        &client.ID,
        &client.FIO, 
        &client.Phone,
        &client.BirthDate,
        &client.RegisterDate,
        &client.MedicalData,
    )
    
    if err != nil {
        return c.Status(404).JSON(fiber.Map{
            "success": false,
            "error":   "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
        })
    }
    
    return c.JSON(fiber.Map{
        "success": true,
        "client": fiber.Map{
            "id": client.ID,
            "fio": client.FIO,
            "phone": client.Phone,
            "birth_date": client.BirthDate.Format("2006-01-02"),
            "medical_data": client.MedicalData.String,
        },
    })
}

// UpdateClient –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
func UpdateClient(c *fiber.Ctx) error {
    id := c.Params("id")
    
    type ClientForm struct {
        FIO         string `form:"fio"`
        Phone       string `form:"phone"`
        BirthDate   string `form:"birth_date"`
        MedicalData string `form:"medical_data"`
    }
    
    var form ClientForm
    if err := c.BodyParser(&form); err != nil {
        return c.Status(400).JSON(fiber.Map{
            "success": false,
            "error":   "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã",
        })
    }
    
    if form.FIO == "" || form.Phone == "" || form.BirthDate == "" {
        return c.Status(400).JSON(fiber.Map{
            "success": false,
            "error":   "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã",
        })
    }
    
    birthDate, err := time.Parse("2006-01-02", form.BirthDate)
    if err != nil {
        return c.Status(400).JSON(fiber.Map{
            "success": false,
            "error":   "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã",
        })
    }
    
    db := database.GetDB()
    
    result, err := db.Exec(`
        UPDATE "–ö–ª–∏–µ–Ω—Ç" 
        SET "–§–ò–û" = $1, "–ù–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞" = $2, "–î–∞—Ç–∞_—Ä–æ–∂–¥–µ–Ω–∏—è" = $3, "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ_–¥–∞–Ω–Ω—ã–µ" = $4
        WHERE "id_–∫–ª–∏–µ–Ω—Ç–∞" = $5
    `, form.FIO, form.Phone, birthDate, form.MedicalData, id)
    
    if err != nil {
        return c.Status(500).JSON(fiber.Map{
            "success": false,
            "error":   "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: " + err.Error(),
        })
    }
    
    rowsAffected, _ := result.RowsAffected()
    if rowsAffected == 0 {
        return c.Status(404).JSON(fiber.Map{
            "success": false,
            "error":   "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
        })
    }
    
    return c.JSON(fiber.Map{
        "success": true,
        "message": "–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
    })
}

func DeleteClient(c *fiber.Ctx) error{
    id := c.Params(("id"))

    clientID, err := strconv.Atoi(id)
    if err != nil{
        return c.Status(400).JSON(fiber.Map{
            "success": false,
            "error": "–ù–µ–≤–µ—Ä–Ω—ã–π Id –∫–ª–∏–µ–Ω—Ç–∞",
        })
    }

    db := database.GetDB()
    var subscriptionCount int

    //–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
    err = db.QueryRow(`SELECT COUNT(*) FROM –ê–±–æ–Ω–µ–º–µ–Ω—Ç WHERE id_–∫–ª–∏–µ–Ω—Ç–∞ = $1`, clientID).Scan(&subscriptionCount)
    if err != nil {
        return c.Status(500).JSON(fiber.Map{
            "success": false,
            "error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞",
        })
    }
    if subscriptionCount > 0{
        return c.Status(400).JSON(fiber.Map{
            "success":false,
            "error": "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã: –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã",
        })
    }

    result, err := db.Exec(`DELETE FROM –ö–ª–∏–µ–Ω—Ç WHERE id_–∫–ª–∏–µ–Ω—Ç–∞ = $1`,clientID)
    if err != nil{
        return c.Status(500).JSON(fiber.Map{
            "success": false,
            "error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞" + err.Error(),
        })
    }

    rowsAffected, _ := result.RowsAffected()
    if rowsAffected == 0{
        return c.Status(404).JSON(fiber.Map{
            "success": false,
            "error": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
        })
    }

    return c.JSON(fiber.Map{
        "success": true,
        "message": "–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
    })
}