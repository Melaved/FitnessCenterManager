package handlers

import (
    "fmt"
    "log"
    "os"
    "path/filepath"
    "fitness-center-manager/internal/config"
    "fitness-center-manager/internal/database"
    "fitness-center-manager/internal/models"
    "github.com/gofiber/fiber/v2"
)

// GetZones –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–æ–Ω
func GetZones(c *fiber.Ctx) error {
    db := database.GetDB()
    
    log.Println("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–æ–Ω –∏–∑ –ë–î...")
    
    rows, err := db.Query(`
        SELECT 
            "id_–∑–æ–Ω—ã",
            "–ù–∞–∑–≤–∞–Ω–∏–µ", 
            "–û–ø–∏—Å–∞–Ω–∏–µ",
            "–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
            "–°—Ç–∞—Ç—É—Å",
            "–§–æ—Ç–æ"
        FROM "–ó–æ–Ω–∞" 
        ORDER BY "id_–∑–æ–Ω—ã"
    `)
    
    if err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–Ω: %v", err)
        return c.Render("zones", fiber.Map{
            "Title": "–ó–æ–Ω—ã",
            "Zones": []models.Zone{},
            "Error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–æ–Ω: " + err.Error(),
        })
    }
    defer rows.Close()
    
    var zones []models.Zone
    for rows.Next() {
        var zone models.Zone
        err := rows.Scan(
            &zone.ID,
            &zone.Name,
            &zone.Description, 
            &zone.Capacity,
            &zone.Status,
            &zone.PhotoPath,
        )
        if err != nil {
            log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–æ–Ω—ã: %v", err)
            continue
        }
        zones = append(zones, zone)
    }
    
    if err = rows.Err(); err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –∑–æ–Ω–∞–º: %v", err)
    }
    
    log.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –∑–æ–Ω –∏–∑ –ë–î", len(zones))
    
    return c.Render("zones", fiber.Map{
        "Title": "–ó–æ–Ω—ã",
        "Zones": zones,
    })
}

// CreateZone —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–æ–Ω—É
func CreateZone(c *fiber.Ctx) error {
    log.Println("üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–æ–Ω—ã...")
    
    type ZoneForm struct {
        Name        string `form:"name"`
        Description string `form:"description"` 
        Capacity    int    `form:"capacity"`
        Status      string `form:"status"`
    }
    
    var form ZoneForm
    if err := c.BodyParser(&form); err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—ã: %v", err)
        return c.Status(400).JSON(fiber.Map{
            "success": false,
            "error":   "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: " + err.Error(),
        })
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if form.Name == "" {
        return c.Status(400).JSON(fiber.Map{
            "success": false,
            "error":   "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
        })
    }
    
    if form.Capacity <= 0 {
        return c.Status(400).JSON(fiber.Map{
            "success": false,
            "error":   "–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º",
        })
    }
    
    db := database.GetDB()
    
    log.Printf("üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: Name=%s, Description=%s, Capacity=%d, Status=%s", 
        form.Name, form.Description, form.Capacity, form.Status)
    
    var zoneID int
    err := db.QueryRow(`
        INSERT INTO "–ó–æ–Ω–∞" ("–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", "–°—Ç–∞—Ç—É—Å")
        VALUES ($1, $2, $3, $4)
        RETURNING "id_–∑–æ–Ω—ã"
    `, form.Name, form.Description, form.Capacity, form.Status).Scan(&zoneID)
    
    if err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–æ–Ω—ã –≤ –ë–î: %v", err)
        return c.Status(500).JSON(fiber.Map{
            "success": false,
            "error":   "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–æ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + err.Error(),
        })
    }
    
    log.Printf("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–æ–Ω–∞: %s (ID: %d)", form.Name, zoneID)
    
    return c.JSON(fiber.Map{
        "success": true,
        "message": "–ó–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
        "zone_id": zoneID,
    })
}

// UploadZonePhoto –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –∑–æ–Ω—ã
func UploadZonePhoto(c *fiber.Ctx) error {
    zoneID := c.Params("id")
    log.Printf("üéØ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –∑–æ–Ω—ã ID: %s", zoneID)
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ —Ñ–æ—Ä–º—ã
    file, err := c.FormFile("photo")
    if err != nil {
        return c.Status(400).JSON(fiber.Map{
            "success": false,
            "error":   "–§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω: " + err.Error(),
        })
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    allowedTypes := map[string]bool{
        "image/jpeg": true,
        "image/png":  true,
    }
    
    if !allowedTypes[file.Header.Get("Content-Type")] {
        return c.Status(400).JSON(fiber.Map{
            "success": false,
            "error":   "–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ JPEG, PNG —Ñ–∞–π–ª—ã",
        })
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if file.Size > 5*1024*1024 {
        return c.Status(400).JSON(fiber.Map{
            "success": false,
            "error":   "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB",
        })
    }
    
    cfg := config.LoadConfig()
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    uploadPath := cfg.Server.UploadPath
    if _, err := os.Stat(uploadPath); os.IsNotExist(err) {
        os.MkdirAll(uploadPath, 0755)
        log.Printf("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫: %s", uploadPath)
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    fileExt := filepath.Ext(file.Filename)
    fileName := fmt.Sprintf("zone_%s%s", zoneID, fileExt)
    filePath := filepath.Join(uploadPath, fileName)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    if err := c.SaveFile(file, filePath); err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
        return c.Status(500).JSON(fiber.Map{
            "success": false,
            "error":   "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " + err.Error(),
        })
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –≤ –ë–î
    db := database.GetDB()
    _, err = db.Exec(`
        UPDATE "–ó–æ–Ω–∞" 
        SET "–§–æ—Ç–æ" = $1 
        WHERE "id_–∑–æ–Ω—ã" = $2
    `, fileName, zoneID)
    
    if err != nil {
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ë–î
        os.Remove(filePath)
        return c.Status(500).JSON(fiber.Map{
            "success": false,
            "error":   "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " + err.Error(),
        })
    }
    
    log.Printf("‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: %s", fileName)
    
    return c.JSON(fiber.Map{
        "success": true,
        "message": "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
        "file_name": fileName,
    })
}

// GetZonePhoto –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ç–æ –∑–æ–Ω—ã
func GetZonePhoto(c *fiber.Ctx) error {
    fileName := c.Params("filename")
    cfg := config.LoadConfig()
    
    filePath := filepath.Join(cfg.Server.UploadPath, fileName)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if _, err := os.Stat(filePath); os.IsNotExist(err) {
        return c.Status(404).SendString("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }
    
    return c.SendFile(filePath)
}