package handlers

import (
	"fitness-center-manager/internal/database"
	"fitness-center-manager/internal/models"
	"log"

	"github.com/gofiber/fiber/v2"
)

// GetSubscriptions –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
func GetSubscriptions(c *fiber.Ctx) error {
    db := database.GetDB()
    
    log.Println("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î...")
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–ú–ï–®–ê–ù–ù–´–ô —Ä–µ–≥–∏—Å—Ç—Ä: id_ —Å –º–∞–ª–µ–Ω—å–∫–æ–π, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å –±–æ–ª—å—à–æ–π
    rows, err := db.Query(`
        SELECT 
            a."id_–∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞",
            a."id_–∫–ª–∏–µ–Ω—Ç–∞", 
            a."id_—Ç–∞—Ä–∏—Ñ–∞",
            a."–î–∞—Ç–∞_–Ω–∞—á–∞–ª–∞",
            a."–î–∞—Ç–∞_–æ–∫–æ–Ω—á–∞–Ω–∏—è", 
            a."–°—Ç–∞—Ç—É—Å",
            a."–¶–µ–Ω–∞",
            k."–§–ò–û" as "–§–ò–û_–∫–ª–∏–µ–Ω—Ç–∞",
            t."–ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–∞—Ä–∏—Ñ–∞" as "–ù–∞–∑–≤–∞–Ω–∏–µ_—Ç–∞—Ä–∏—Ñ–∞"
        FROM "–ê–±–æ–Ω–µ–º–µ–Ω—Ç" a
        JOIN "–ö–ª–∏–µ–Ω—Ç" k ON a."id_–∫–ª–∏–µ–Ω—Ç–∞" = k."id_–∫–ª–∏–µ–Ω—Ç–∞"
        JOIN "–¢–∞—Ä–∏—Ñ" t ON a."id_—Ç–∞—Ä–∏—Ñ–∞" = t."id_—Ç–∞—Ä–∏—Ñ–∞"
        ORDER BY a."id_–∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞"
    `)
    
    if err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: %v", err)
        return c.Render("subscriptions", fiber.Map{
            "Title":         "–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã",
            "Subscriptions": []models.Subscription{},
        })
    }
    defer rows.Close()
    
    var subscriptions []models.Subscription
    for rows.Next() {
        var sub models.Subscription
        err := rows.Scan(
            &sub.ID,
            &sub.ClientID,
            &sub.TariffID, 
            &sub.StartDate,
            &sub.EndDate,
            &sub.Status,
            &sub.Price,
            &sub.ClientName,
            &sub.TariffName,
        )
        if err != nil {
            log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: %v", err)
            continue
        }
        subscriptions = append(subscriptions, sub)
    }
    
    log.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤", len(subscriptions))
    
    return c.Render("subscriptions", fiber.Map{
        "Title":         "–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã", 
        "Subscriptions": subscriptions,
    })
}

// GetClientsForSelect –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è ComboBox
func GetClientsForSelect(c *fiber.Ctx) error {
    db := database.GetDB()
    
    log.Println("üîç GetClientsForSelect: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è ComboBox...")
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–ú–ï–®–ê–ù–ù–´–ô —Ä–µ–≥–∏—Å—Ç—Ä
    rows, err := db.Query(`
        SELECT "id_–∫–ª–∏–µ–Ω—Ç–∞", "–§–ò–û" 
        FROM "–ö–ª–∏–µ–Ω—Ç" 
        ORDER BY "–§–ò–û"
    `)
    if err != nil {
        log.Printf("‚ùå GetClientsForSelect –æ—à–∏–±–∫–∞: %v", err)
        return c.Status(500).JSON(fiber.Map{
            "success": false,
            "error":   "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤: " + err.Error(),
        })
    }
    defer rows.Close()
    
    var clients []fiber.Map
    for rows.Next() {
        var id int
        var name string
        err := rows.Scan(&id, &name)
        if err != nil {
            log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: %v", err)
            continue
        }
        clients = append(clients, fiber.Map{
            "id":   id,
            "name": name,
        })
    }
    
    log.Printf("‚úÖ GetClientsForSelect: –∑–∞–≥—Ä—É–∂–µ–Ω–æ %d –∫–ª–∏–µ–Ω—Ç–æ–≤", len(clients))
    
    return c.JSON(fiber.Map{
        "success": true,
        "clients": clients,
    })
}

// GetTrainersForSelect –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –¥–ª—è ComboBox
func GetTrainersForSelect(c *fiber.Ctx) error {
    db := database.GetDB()
    
    rows, err := db.Query(`
        SELECT "id_—Ç—Ä–µ–Ω–µ—Ä–∞", "–§–ò–û" 
        FROM "–¢—Ä–µ–Ω–µ—Ä" 
        WHERE "–ê–∫—Ç–∏–≤–µ–Ω" = true 
        ORDER BY "–§–ò–û"
    `)
    if err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤: %v", err)
        return c.JSON(fiber.Map{
            "success": false,
            "error":   "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤",
        })
    }
    defer rows.Close()
    
    var trainers []fiber.Map
    for rows.Next() {
        var id int
        var name string
        err := rows.Scan(&id, &name)
        if err != nil {
            continue
        }
        trainers = append(trainers, fiber.Map{
            "id":   id,
            "name": name,
        })
    }
    
    return c.JSON(fiber.Map{
        "success":  true,
        "trainers": trainers,
    })
}